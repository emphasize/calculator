ohm:
    exe:
      - return units["volt"]/units["ampere"]
volt:
    exe:
      - return units["ohm"]*units["ampere"]
ampere:
    exe:
      - return units["volt"]/units["ohm"]
watt:
    exe:
      - if "volt"  in units.keys() and "ampere" in units.keys():
            return units["volt"]*units["ampere"]
      - elif "ampere" in units.keys() and "ohm" in units.keys():
            return (units["ampere"]**2)*units["ohm"]
      - elif "volt" in units.keys() and "ohm" in units.keys():
            return (units["volt"]**2)*units["ohm"]
meter:
    diameter:
      - if "radius" in units.keys():
           return units["radius"]*2 #### force unit meter
      - elif "scope"  in units.keys():
           return (units["scope"]/(2*math.pi))*2
      - elif "surface" in units.keys():
           radius = units["surface"]/math.pi
           return math.sqrt(radius)*2
    radius:
      - if "diameter" in units.keys():
            return units["diameter"]/2
      - elif "scope"  in units.keys():
            return units["scope"]/(2*math.pi)
      - elif "surface" in units.keys():
            radius = units["surface"]/math.pi
            return math.sqrt(radius)
    scope:
      -  if "diameter" in units.keys():
            radius = units["diameter"]/2
            return 2*math.pi*radius
      -  elif "radius"  in units.keys():
            return 2*math.pi*units["radius"]
      -  elif "surface" in units.keys():
            result = units["surface"]/math.pi
            radius = math.sqrt(result)
            return 2*math.pi*radius
    brakingdistance:
      -  if "kmh" in units.keys():
            return (units["kmh"]/10)*(units["kmh"]/10)
quadratmeter:
    surface:
      - if "diameter" in units.keys():
            radius = units["diameter"]/2
            return math.pi*(radius**2)
      - elif "radius"  in units.keys():
            return math.pi*(units["radius"]**2)
      - elif "scope" in units.keys():
            radius = units["surface"]/(2*math.pi)
            return math.pi*(radius**2)